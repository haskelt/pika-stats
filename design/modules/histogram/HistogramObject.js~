class HistogramObject {

    /**************************************************************************/

    constructor () {
	
	this.color = "steelblue";
	this.height = 500;
	this.width = 500;
	this.margin = ({top: 20, right: 20, bottom: 30, left: 40});

    } // constructor
    
    /**************************************************************************/

    setData (data) {

	this.data = data;
	this.bins = d3.bin().thresholds(40)(data);

    } // setData
    
    /**************************************************************************/

    configureAxes (x_axis_label, y_axis_label) {

	this.x = d3.scaleLinear()
	    .domain([this.bins[0].x0, this.bins[this.bins.length - 1].x1])
	    .range([this.margin.left, this.width - this.margin.right]);

	this.y = d3.scaleLinear()
	    .domain([0, d3.max(this.bins, d => d.length)]).nice()
	    .range([this.height - this.margin.bottom, this.margin.top]);

	this.xAxis = g => g
	    .attr("transform", `translate(0,${this.height - this.margin.bottom})`)
	    .call(d3.axisBottom(this.x).ticks(this.width / 80 ).tickSizeOuter(0))
	    .call(g => g.append("text")
		  .attr("x", this.width - this.margin.right)
		  .attr("y", -4)
		  .attr("fill", "currentColor")
		  .attr("font-weight", "bold")
		  .attr("text-anchor", "end")
		  .text(x_axis_label));

	this.yAxis = g => g
	    .attr("transform", `translate(${this.margin.left},0)`)
	    .call(d3.axisLeft(this.y).ticks(this.height / 40))
	    .call(g => g.select(".domain").remove())
	    .call(g => g.select(".tick:last-of-type text").clone()
		  .attr("x", 4)
		  .attr("text-anchor", "start")
		  .attr("font-weight", "bold")
		  .text(y_axis_label));
	
    } // configureAxes

    /**************************************************************************/
    
    buildChart () {
	this.svg = d3.create("svg")
	      .attr("viewBox", [0, 0, this.width, this.height]);
	
	this.svg.append("g")
	    .attr("fill", this.color)
	    .selectAll("rect")
	    .data(this.bins)
	    .join("rect")
	    .attr("class", "bar")
	    .attr("x", d => this.x(d.x0) + 1)
	    .attr("width", d => Math.max(0, this.x(d.x1) - this.x(d.x0) - 1))
	    .attr("y", d => this.y(d.length))
	    .attr("height", d => this.y(0) - this.y(d.length));
	
	this.svg.append("g")
	    .call(this.xAxis);
	
	this.svg.append("g")
	    .call(this.yAxis);
	
	return this.svg.node();

    } // buildChart

    /**************************************************************************/

    updateChart (data) {

	this.data = data;
	this.bins = d3.bin().thresholds(40)(data);
	this.svg.selectAll(".bar")
	    .attr("y", d => this.y(d.length))
	    .attr("height", d => this.y(0) - this.y(d.length));
	
    } // updateChart
    
    /**************************************************************************/

} // HistogramObject

export default HistogramObject;
